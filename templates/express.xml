<templateSet group="express">
  <template name="sch" value="const mongoose = require('mongoose');&#10;const Schema = mongoose.Schema;&#10;&#10;const $NAME$Schema = new Schema({&#10;  $END$ &#10;});&#10;&#10;module.exports = mongoose.model('$NAME$', $NAME$Schema);" description="schema definition" toReformat="false" toShortenFQNames="true">
    <variable name="NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JS_STATEMENT" value="true" />
    </context>
  </template>
  <template name="datar" value="$NAME$: {&#10;  type: $TYPE$,&#10;  required: true&#10;}" description="required schema data" toReformat="false" toShortenFQNames="true">
    <variable name="NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="TYPE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="JSX_HTML" value="false" />
      <option name="JS_CLASS" value="false" />
      <option name="JS_EXPRESSION" value="false" />
      <option name="JS_STATEMENT" value="false" />
    </context>
  </template>
  <template name="datau" value="$NAME$: {&#10;  type: $TYPE$,&#10;  required: true,&#10;  unique: true&#10;}" description="unique schema data" toReformat="false" toShortenFQNames="true">
    <variable name="NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="TYPE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="JSX_HTML" value="false" />
      <option name="JS_CLASS" value="false" />
      <option name="JS_EXPRESSION" value="false" />
      <option name="JS_STATEMENT" value="false" />
    </context>
  </template>
  <template name="data" value="$NAME$: {&#10;  type: $TYPE$&#10;}" description="schema data" toReformat="false" toShortenFQNames="true">
    <variable name="NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="TYPE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="JSX_HTML" value="false" />
      <option name="JS_CLASS" value="false" />
      <option name="JS_EXPRESSION" value="false" />
      <option name="JS_STATEMENT" value="false" />
    </context>
  </template>
  <template name="schu" value="const mongoose = require('mongoose');&#10;const uniqueValidator = require('mongoose-unique-validator');&#10;const Schema = mongoose.Schema;&#10;&#10;const $NAME$Schema = new Schema({&#10;  $END$ &#10;});&#10;&#10;$NAME$Schema.plugin(uniqueValidator);&#10;module.exports = mongoose.model('$NAME$', $NAME$Schema);" description="unique schema definition" toReformat="false" toShortenFQNames="true">
    <variable name="NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JS_CLASS" value="true" />
    </context>
  </template>
  <template name="routd" value="const express = require('express');&#10;const router = express.Router();&#10;&#10;const $NAME$ = require('./$FILE$.model');&#10;&#10;module.exports = router;" description="routing definition" toReformat="false" toShortenFQNames="true">
    <variable name="NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="FILE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JS_STATEMENT" value="true" />
    </context>
  </template>
  <template name="routa" value=".$ROUTE$((request, response) =&gt; {&#10;  $END$&#10;})" description="route assignment" toReformat="false" toShortenFQNames="true">
    <variable name="ROUTE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JS_EXPRESSION" value="true" />
    </context>
  </template>
  <template name="routi" value="router.route($URL$)&#10;  $END$" description="route implementation" toReformat="false" toShortenFQNames="true">
    <variable name="URL" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JS_STATEMENT" value="true" />
    </context>
  </template>
</templateSet>