<templateSet group="express">
  <template name="sch" value="const mongoose = require('mongoose');&#10;const Schema = mongoose.Schema;&#10;&#10;const $NAME$Schema = new Schema({&#10;  $END$ &#10;});&#10;&#10;module.exports = mongoose.model('$NAME$', $NAME$Schema);" description="schema definition" toReformat="false" toShortenFQNames="true">
    <variable name="NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JS_STATEMENT" value="true" />
    </context>
  </template>
  <template name="datar" value="$NAME$: {&#10;  type: $TYPE$,&#10;  required: true&#10;}" description="required schema data" toReformat="false" toShortenFQNames="true">
    <variable name="NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="TYPE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="JSX_HTML" value="false" />
      <option name="JS_CLASS" value="false" />
      <option name="JS_EXPRESSION" value="false" />
      <option name="JS_STATEMENT" value="false" />
    </context>
  </template>
  <template name="datau" value="$NAME$: {&#10;  type: $TYPE$,&#10;  required: true,&#10;  unique: true&#10;}" description="unique schema data" toReformat="false" toShortenFQNames="true">
    <variable name="NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="TYPE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="JSX_HTML" value="false" />
      <option name="JS_CLASS" value="false" />
      <option name="JS_EXPRESSION" value="false" />
      <option name="JS_STATEMENT" value="false" />
    </context>
  </template>
  <template name="data" value="$NAME$: {&#10;  type: $TYPE$&#10;}" description="schema data" toReformat="false" toShortenFQNames="true">
    <variable name="NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="TYPE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="JSX_HTML" value="false" />
      <option name="JS_CLASS" value="false" />
      <option name="JS_EXPRESSION" value="false" />
      <option name="JS_STATEMENT" value="false" />
    </context>
  </template>
  <template name="schu" value="const mongoose = require('mongoose');&#10;const uniqueValidator = require('mongoose-unique-validator');&#10;const Schema = mongoose.Schema;&#10;&#10;const $NAME$Schema = new Schema({&#10;  $END$ &#10;});&#10;&#10;$NAME$Schema.plugin(uniqueValidator);&#10;module.exports = mongoose.model('$NAME$', $NAME$Schema);" description="unique schema definition" toReformat="false" toShortenFQNames="true">
    <variable name="NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JS_CLASS" value="true" />
    </context>
  </template>
  <template name="rout" value="const express = require('express');&#10;const router = express.Router();&#10;&#10;const $NAME$ = require('./$MODEL$.model');&#10;const $URL$Route = '/$URL$';&#10;&#10;router.route($URL$Route)&#10;  .get((request, response) =&gt; {&#10;    $NAME$.find((error, $URL$) =&gt; {&#10;      if (error) {&#10;        return response.send(error);&#10;      }&#10;      response.json($URL$);&#10;    });&#10;  })&#10;  .post((request, response) =&gt; {&#10;    let $MODEL$ = new $NAME$();&#10;    $MODEL$.$DATA$ = request.body.$DATA$;&#10;    $MODEL$.save(error =&gt; {&#10;      if (error) {&#10;        return response.send(error);&#10;      }&#10;      response.json($MODEL$);&#10;    });&#10;  });&#10;&#10;router.route($URL$Route + '/:$MODEL$_id')&#10;  .get((request, response) =&gt; {&#10;    $NAME$.findById(request.params.$MODEL$_id, (error, $MODEL$) =&gt; {&#10;      if (error) {&#10;        return response.send(error);&#10;      }&#10;      response.json($MODEL$);&#10;    });&#10;  })&#10;  .put((request, response) =&gt; {&#10;    $NAME$.findById(request.params.$MODEL$_id, (error, $MODEL$) =&gt; {&#10;      if (error) {&#10;        return response.send(error);&#10;      }&#10;      $MODEL$.$DATA$ = request.body.$DATA$;&#10;      $MODEL$.save(error =&gt; {&#10;        if (error) {&#10;          return response.send(error);&#10;        }&#10;        response.json($MODEL$);&#10;      });&#10;    });&#10;  })&#10;  .delete((request, response) =&gt; {&#10;    $NAME$.remove({&#10;      _id: request.params.$MODEL$_id&#10;    }, error =&gt; {&#10;      if (error) {&#10;        return response.send(error);&#10;      }&#10;      response.json(true);&#10;    })&#10;  });&#10;&#10;module.exports = router;" description="routing definition" toReformat="false" toShortenFQNames="true">
    <variable name="NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODEL" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="URL" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="DATA" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JS_STATEMENT" value="true" />
    </context>
  </template>
  <template name="body" value="$NAME$.$DATA$ = request.body.$DATA$;" description="assignment from request body" toReformat="false" toShortenFQNames="true">
    <variable name="NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="DATA" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JS_STATEMENT" value="true" />
    </context>
  </template>
</templateSet>